{"ast":null,"code":"import { difference, replaceAt } from './utils.esm.js';\nimport { notifyManager } from './notifyManager.esm.js';\nimport { QueryObserver } from './queryObserver.esm.js';\nimport { Subscribable } from './subscribable.esm.js';\nclass QueriesObserver extends Subscribable {\n  constructor(client, queries) {\n    super();\n    this.client = client;\n    this.queries = [];\n    this.result = [];\n    this.observers = [];\n    this.observersMap = {};\n    if (queries) {\n      this.setQueries(queries);\n    }\n  }\n  onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result);\n        });\n      });\n    }\n  }\n  onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  }\n  destroy() {\n    this.listeners = [];\n    this.observers.forEach(observer => {\n      observer.destroy();\n    });\n  }\n  setQueries(queries, notifyOptions) {\n    this.queries = queries;\n    notifyManager.batch(() => {\n      const prevObservers = this.observers;\n      const newObserverMatches = this.findMatchingObservers(this.queries); // set options for the new observers to notify of changes\n\n      newObserverMatches.forEach(match => match.observer.setOptions(match.defaultedQueryOptions, notifyOptions));\n      const newObservers = newObserverMatches.map(match => match.observer);\n      const newObserversMap = Object.fromEntries(newObservers.map(observer => [observer.options.queryHash, observer]));\n      const newResult = newObservers.map(observer => observer.getCurrentResult());\n      const hasIndexChange = newObservers.some((observer, index) => observer !== prevObservers[index]);\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n      this.observers = newObservers;\n      this.observersMap = newObserversMap;\n      this.result = newResult;\n      if (!this.hasListeners()) {\n        return;\n      }\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result);\n        });\n      });\n      this.notify();\n    });\n  }\n  getCurrentResult() {\n    return this.result;\n  }\n  getQueries() {\n    return this.observers.map(observer => observer.getCurrentQuery());\n  }\n  getObservers() {\n    return this.observers;\n  }\n  getOptimisticResult(queries) {\n    return this.findMatchingObservers(queries).map(match => match.observer.getOptimisticResult(match.defaultedQueryOptions));\n  }\n  findMatchingObservers(queries) {\n    const prevObservers = this.observers;\n    const defaultedQueryOptions = queries.map(options => this.client.defaultQueryOptions(options));\n    const matchingObservers = defaultedQueryOptions.flatMap(defaultedOptions => {\n      const match = prevObservers.find(observer => observer.options.queryHash === defaultedOptions.queryHash);\n      if (match != null) {\n        return [{\n          defaultedQueryOptions: defaultedOptions,\n          observer: match\n        }];\n      }\n      return [];\n    });\n    const matchedQueryHashes = matchingObservers.map(match => match.defaultedQueryOptions.queryHash);\n    const unmatchedQueries = defaultedQueryOptions.filter(defaultedOptions => !matchedQueryHashes.includes(defaultedOptions.queryHash));\n    const unmatchedObservers = prevObservers.filter(prevObserver => !matchingObservers.some(match => match.observer === prevObserver));\n    const getObserver = options => {\n      const defaultedOptions = this.client.defaultQueryOptions(options);\n      const currentObserver = this.observersMap[defaultedOptions.queryHash];\n      return currentObserver != null ? currentObserver : new QueryObserver(this.client, defaultedOptions);\n    };\n    const newOrReusedObservers = unmatchedQueries.map((options, index) => {\n      if (options.keepPreviousData) {\n        // return previous data from one of the observers that no longer match\n        const previouslyUsedObserver = unmatchedObservers[index];\n        if (previouslyUsedObserver !== undefined) {\n          return {\n            defaultedQueryOptions: options,\n            observer: previouslyUsedObserver\n          };\n        }\n      }\n      return {\n        defaultedQueryOptions: options,\n        observer: getObserver(options)\n      };\n    });\n    const sortMatchesByOrderOfQueries = (a, b) => defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n    return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n  }\n  onUpdate(observer, result) {\n    const index = this.observers.indexOf(observer);\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result);\n      this.notify();\n    }\n  }\n  notify() {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result);\n      });\n    });\n  }\n}\nexport { QueriesObserver };","map":{"version":3,"sources":["../../src/queriesObserver.ts"],"names":["QueriesObserver","Subscribable","constructor","client","queries","result","observers","observersMap","setQueries","onSubscribe","listeners","length","forEach","observer","subscribe","onUpdate","onUnsubscribe","destroy","notifyOptions","notifyManager","batch","prevObservers","newObserverMatches","findMatchingObservers","match","setOptions","defaultedQueryOptions","newObservers","map","newObserversMap","Object","fromEntries","options","queryHash","newResult","getCurrentResult","hasIndexChange","some","index","hasListeners","difference","notify","getQueries","getCurrentQuery","getObservers","getOptimisticResult","defaultQueryOptions","matchingObservers","flatMap","defaultedOptions","find","matchedQueryHashes","unmatchedQueries","filter","includes","unmatchedObservers","prevObserver","getObserver","currentObserver","QueryObserver","newOrReusedObservers","keepPreviousData","previouslyUsedObserver","undefined","sortMatchesByOrderOfQueries","a","b","indexOf","concat","sort","replaceAt","listener"],"mappings":"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","sourcesContent":["import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  QueryObserverOptions,\n  QueryObserverResult,\n  DefaultedQueryObserverOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.observers\n\n      const newObserverMatches = this.findMatchingObservers(this.queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newObserversMap = Object.fromEntries(\n        newObservers.map((observer) => [observer.options.queryHash, observer]),\n      )\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getQueries() {\n    return this.observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.observers\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return this.findMatchingObservers(queries).map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n  }\n\n  private findMatchingObservers(\n    queries: QueryObserverOptions[],\n  ): QueryObserverMatch[] {\n    const prevObservers = this.observers\n    const defaultedQueryOptions = queries.map((options) =>\n      this.client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: QueryObserverMatch[] =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObservers.find(\n          (observer) =>\n            observer.options.queryHash === defaultedOptions.queryHash,\n        )\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = matchingObservers.map(\n      (match) => match.defaultedQueryOptions.queryHash,\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) =>\n        !matchedQueryHashes.includes(defaultedOptions.queryHash),\n    )\n\n    const unmatchedObservers = prevObservers.filter(\n      (prevObserver) =>\n        !matchingObservers.some((match) => match.observer === prevObserver),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.client.defaultQueryOptions(options)\n      const currentObserver = this.observersMap[defaultedOptions.queryHash!]\n      return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n    }\n\n    const newOrReusedObservers: QueryObserverMatch[] = unmatchedQueries.map(\n      (options, index) => {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          const previouslyUsedObserver = unmatchedObservers[index]\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver,\n            }\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      },\n    )\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(this.result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n"]},"metadata":{},"sourceType":"module"}