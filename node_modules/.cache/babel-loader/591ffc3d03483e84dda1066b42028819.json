{"ast":null,"code":"import { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.esm.js';\nimport * as React from 'react';\nimport { displayValue, styled } from './utils.esm.js';\nimport SuperJSON from 'superjson';\nconst Entry = styled('div', {\n  fontFamily: 'Menlo, monospace',\n  fontSize: '1em',\n  lineHeight: '1.7',\n  outline: 'none',\n  wordBreak: 'break-word'\n});\nconst Label = styled('span', {\n  color: 'white'\n});\nconst LabelButton = styled('button', {\n  cursor: 'pointer',\n  color: 'white'\n});\nconst ExpandButton = styled('button', {\n  cursor: 'pointer',\n  color: 'inherit',\n  font: 'inherit',\n  outline: 'inherit',\n  background: 'transparent',\n  border: 'none',\n  padding: 0\n});\nconst CopyButton = _ref => {\n  let {\n    value\n  } = _ref;\n  const [copyState, setCopyState] = React.useState('NoCopy');\n  return /*#__PURE__*/React.createElement(\"button\", {\n    onClick: copyState === 'NoCopy' ? () => {\n      navigator.clipboard.writeText(SuperJSON.stringify(value)).then(() => {\n        setCopyState('SuccessCopy');\n        setTimeout(() => {\n          setCopyState('NoCopy');\n        }, 1500);\n      }, err => {\n        console.error('Failed to copy: ', err);\n        setCopyState('ErrorCopy');\n        setTimeout(() => {\n          setCopyState('NoCopy');\n        }, 1500);\n      });\n    } : undefined,\n    style: {\n      cursor: 'pointer',\n      color: 'inherit',\n      font: 'inherit',\n      outline: 'inherit',\n      background: 'transparent',\n      border: 'none',\n      padding: 0\n    }\n  }, copyState === 'NoCopy' ? /*#__PURE__*/React.createElement(Copier, null) : copyState === 'SuccessCopy' ? /*#__PURE__*/React.createElement(CopiedCopier, null) : /*#__PURE__*/React.createElement(ErrorCopier, null));\n};\nconst Value = styled('span', (_props, theme) => ({\n  color: theme.danger\n}));\nconst SubEntries = styled('div', {\n  marginLeft: '.1em',\n  paddingLeft: '1em',\n  borderLeft: '2px solid rgba(0,0,0,.15)'\n});\nconst Info = styled('span', {\n  color: 'grey',\n  fontSize: '.7em'\n});\nconst Expander = _ref2 => {\n  let {\n    expanded,\n    style = {}\n  } = _ref2;\n  return /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'inline-block',\n      transition: 'all .1s ease',\n      transform: \"rotate(\" + (expanded ? 90 : 0) + \"deg) \" + (style.transform || ''),\n      ...style\n    }\n  }, \"\\u25B6\");\n};\nconst Copier = () => /*#__PURE__*/React.createElement(\"span\", {\n  \"aria-label\": \"Copy object to clipboard\",\n  title: \"Copy object to clipboard\",\n  style: {\n    paddingLeft: '1em'\n  }\n}, /*#__PURE__*/React.createElement(\"svg\", {\n  height: \"12\",\n  viewBox: \"0 0 16 12\",\n  width: \"10\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"\n})));\nconst ErrorCopier = () => /*#__PURE__*/React.createElement(\"span\", {\n  \"aria-label\": \"Failed copying to clipboard\",\n  title: \"Failed copying to clipboard\",\n  style: {\n    paddingLeft: '1em',\n    display: 'flex',\n    alignItems: 'center'\n  }\n}, /*#__PURE__*/React.createElement(\"svg\", {\n  height: \"12\",\n  viewBox: \"0 0 16 12\",\n  width: \"10\",\n  display: \"block\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"red\",\n  d: \"M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z\"\n})), /*#__PURE__*/React.createElement(\"span\", {\n  style: {\n    color: 'red',\n    fontSize: '12px',\n    paddingLeft: '4px',\n    position: 'relative',\n    top: '2px'\n  }\n}, \"See console\"));\nconst CopiedCopier = () => /*#__PURE__*/React.createElement(\"span\", {\n  \"aria-label\": \"Object copied to clipboard\",\n  title: \"Object copied to clipboard\",\n  style: {\n    paddingLeft: '1em',\n    display: 'inline-block',\n    verticalAlign: 'middle'\n  }\n}, /*#__PURE__*/React.createElement(\"svg\", {\n  height: \"16\",\n  viewBox: \"0 0 16 16\",\n  width: \"16\",\n  display: \"block\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"green\",\n  d: \"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\"\n})));\n\n/**\n * Chunk elements in the array by size\n *\n * when the array cannot be chunked evenly by size, the last chunk will be\n * filled with the remaining elements\n *\n * @example\n * chunkArray(['a','b', 'c', 'd', 'e'], 2) // returns [['a','b'], ['c', 'd'], ['e']]\n */\nfunction chunkArray(array, size) {\n  if (size < 1) return [];\n  let i = 0;\n  const result = [];\n  while (i < array.length) {\n    result.push(array.slice(i, i + size));\n    i = i + size;\n  }\n  return result;\n}\nconst DefaultRenderer = _ref3 => {\n  let {\n    handleEntry,\n    label,\n    value,\n    subEntries = [],\n    subEntryPages = [],\n    type,\n    expanded = false,\n    copyable = false,\n    toggleExpanded,\n    pageSize\n  } = _ref3;\n  const [expandedPages, setExpandedPages] = React.useState([]);\n  return /*#__PURE__*/React.createElement(Entry, {\n    key: label\n  }, subEntryPages.length ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ExpandButton, {\n    onClick: () => toggleExpanded()\n  }, /*#__PURE__*/React.createElement(Expander, {\n    expanded: expanded\n  }), \" \", label, ' ', /*#__PURE__*/React.createElement(Info, null, String(type).toLowerCase() === 'iterable' ? '(Iterable) ' : '', subEntries.length, \" \", subEntries.length > 1 ? \"items\" : \"item\")), copyable ? /*#__PURE__*/React.createElement(CopyButton, {\n    value: value\n  }) : null, expanded ? subEntryPages.length === 1 ? /*#__PURE__*/React.createElement(SubEntries, null, subEntries.map(handleEntry)) : /*#__PURE__*/React.createElement(SubEntries, null, subEntryPages.map((entries, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index\n  }, /*#__PURE__*/React.createElement(Entry, null, /*#__PURE__*/React.createElement(LabelButton, {\n    onClick: () => setExpandedPages(old => old.includes(index) ? old.filter(d => d !== index) : [...old, index])\n  }, /*#__PURE__*/React.createElement(Expander, {\n    expanded: expanded\n  }), \" [\", index * pageSize, \" ...\", ' ', index * pageSize + pageSize - 1, \"]\"), expandedPages.includes(index) ? /*#__PURE__*/React.createElement(SubEntries, null, entries.map(handleEntry)) : null)))) : null) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Label, null, label, \":\"), \" \", /*#__PURE__*/React.createElement(Value, null, displayValue(value))));\n};\nfunction isIterable(x) {\n  return Symbol.iterator in x;\n}\nfunction Explorer(_ref4) {\n  let {\n    value,\n    defaultExpanded,\n    renderer = DefaultRenderer,\n    pageSize = 100,\n    copyable = false,\n    ...rest\n  } = _ref4;\n  const [expanded, setExpanded] = React.useState(Boolean(defaultExpanded));\n  const toggleExpanded = React.useCallback(() => setExpanded(old => !old), []);\n  let type = typeof value;\n  let subEntries = [];\n  const makeProperty = sub => {\n    const subDefaultExpanded = defaultExpanded === true ? {\n      [sub.label]: true\n    } : defaultExpanded == null ? void 0 : defaultExpanded[sub.label];\n    return {\n      ...sub,\n      defaultExpanded: subDefaultExpanded\n    };\n  };\n  if (Array.isArray(value)) {\n    type = 'array';\n    subEntries = value.map((d, i) => makeProperty({\n      label: i.toString(),\n      value: d\n    }));\n  } else if (value !== null && typeof value === 'object' && isIterable(value) && typeof value[Symbol.iterator] === 'function') {\n    type = 'Iterable';\n    subEntries = Array.from(value, (val, i) => makeProperty({\n      label: i.toString(),\n      value: val\n    }));\n  } else if (typeof value === 'object' && value !== null) {\n    type = 'object';\n    subEntries = Object.entries(value).map(_ref5 => {\n      let [key, val] = _ref5;\n      return makeProperty({\n        label: key,\n        value: val\n      });\n    });\n  }\n  const subEntryPages = chunkArray(subEntries, pageSize);\n  return renderer({\n    handleEntry: entry => /*#__PURE__*/React.createElement(Explorer, _extends({\n      key: entry.label,\n      value: value,\n      renderer: renderer,\n      copyable: copyable\n    }, rest, entry)),\n    type,\n    subEntries,\n    subEntryPages,\n    value,\n    expanded,\n    copyable,\n    toggleExpanded,\n    pageSize,\n    ...rest\n  });\n}\nexport { CopyButton, DefaultRenderer, Entry, ExpandButton, Expander, Info, Label, LabelButton, SubEntries, Value, chunkArray, Explorer as default };","map":{"version":3,"sources":["../../src/Explorer.tsx"],"names":["Entry","styled","fontFamily","fontSize","lineHeight","outline","wordBreak","Label","color","LabelButton","cursor","ExpandButton","font","background","border","padding","CopyButton","value","copyState","setCopyState","React","useState","navigator","clipboard","writeText","superjson","stringify","then","setTimeout","err","console","error","undefined","Value","_props","theme","danger","SubEntries","marginLeft","paddingLeft","borderLeft","Info","Expander","expanded","style","display","transition","transform","Copier","ErrorCopier","alignItems","position","top","CopiedCopier","verticalAlign","chunkArray","array","size","i","result","length","push","slice","DefaultRenderer","handleEntry","label","subEntries","subEntryPages","type","copyable","toggleExpanded","pageSize","expandedPages","setExpandedPages","String","toLowerCase","map","entries","index","old","includes","filter","d","displayValue","isIterable","x","Symbol","iterator","Explorer","defaultExpanded","renderer","rest","setExpanded","Boolean","useCallback","makeProperty","sub","subDefaultExpanded","Array","isArray","toString","from","val","key","entry"],"mappings":"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","sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport { displayValue, styled } from './utils'\nimport superjson from 'superjson'\n\nexport const Entry = styled('div', {\n  fontFamily: 'Menlo, monospace',\n  fontSize: '1em',\n  lineHeight: '1.7',\n  outline: 'none',\n  wordBreak: 'break-word',\n})\n\nexport const Label = styled('span', {\n  color: 'white',\n})\n\nexport const LabelButton = styled('button', {\n  cursor: 'pointer',\n  color: 'white',\n})\n\nexport const ExpandButton = styled('button', {\n  cursor: 'pointer',\n  color: 'inherit',\n  font: 'inherit',\n  outline: 'inherit',\n  background: 'transparent',\n  border: 'none',\n  padding: 0,\n})\n\ntype CopyState = 'NoCopy' | 'SuccessCopy' | 'ErrorCopy'\n\nexport const CopyButton = ({ value }: { value: unknown }) => {\n  const [copyState, setCopyState] = React.useState<CopyState>('NoCopy')\n\n  return (\n    <button\n      onClick={\n        copyState === 'NoCopy'\n          ? () => {\n              navigator.clipboard.writeText(superjson.stringify(value)).then(\n                () => {\n                  setCopyState('SuccessCopy')\n                  setTimeout(() => {\n                    setCopyState('NoCopy')\n                  }, 1500)\n                },\n                (err) => {\n                  console.error('Failed to copy: ', err)\n                  setCopyState('ErrorCopy')\n                  setTimeout(() => {\n                    setCopyState('NoCopy')\n                  }, 1500)\n                },\n              )\n            }\n          : undefined\n      }\n      style={{\n        cursor: 'pointer',\n        color: 'inherit',\n        font: 'inherit',\n        outline: 'inherit',\n        background: 'transparent',\n        border: 'none',\n        padding: 0,\n      }}\n    >\n      {copyState === 'NoCopy' ? (\n        <Copier />\n      ) : copyState === 'SuccessCopy' ? (\n        <CopiedCopier />\n      ) : (\n        <ErrorCopier />\n      )}\n    </button>\n  )\n}\n\nexport const Value = styled('span', (_props, theme) => ({\n  color: theme.danger,\n}))\n\nexport const SubEntries = styled('div', {\n  marginLeft: '.1em',\n  paddingLeft: '1em',\n  borderLeft: '2px solid rgba(0,0,0,.15)',\n})\n\nexport const Info = styled('span', {\n  color: 'grey',\n  fontSize: '.7em',\n})\n\ntype ExpanderProps = {\n  expanded: boolean\n  style?: React.CSSProperties\n}\n\nexport const Expander = ({ expanded, style = {} }: ExpanderProps) => (\n  <span\n    style={{\n      display: 'inline-block',\n      transition: 'all .1s ease',\n      transform: `rotate(${expanded ? 90 : 0}deg) ${style.transform || ''}`,\n      ...style,\n    }}\n  >\n    ▶\n  </span>\n)\n\nconst Copier = () => (\n  <span\n    aria-label=\"Copy object to clipboard\"\n    title=\"Copy object to clipboard\"\n    style={{\n      paddingLeft: '1em',\n    }}\n  >\n    <svg height=\"12\" viewBox=\"0 0 16 12\" width=\"10\">\n      <path\n        fill=\"currentColor\"\n        d=\"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"\n      ></path>\n      <path\n        fill=\"currentColor\"\n        d=\"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"\n      ></path>\n    </svg>\n  </span>\n)\n\nconst ErrorCopier = () => (\n  <span\n    aria-label=\"Failed copying to clipboard\"\n    title=\"Failed copying to clipboard\"\n    style={{\n      paddingLeft: '1em',\n      display: 'flex',\n      alignItems: 'center',\n    }}\n  >\n    <svg height=\"12\" viewBox=\"0 0 16 12\" width=\"10\" display=\"block\">\n      <path\n        fill=\"red\"\n        d=\"M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z\"\n      ></path>\n    </svg>\n    <span\n      style={{\n        color: 'red',\n        fontSize: '12px',\n        paddingLeft: '4px',\n        position: 'relative',\n        top: '2px',\n      }}\n    >\n      See console\n    </span>\n  </span>\n)\n\nconst CopiedCopier = () => (\n  <span\n    aria-label=\"Object copied to clipboard\"\n    title=\"Object copied to clipboard\"\n    style={{\n      paddingLeft: '1em',\n      display: 'inline-block',\n      verticalAlign: 'middle',\n    }}\n  >\n    <svg height=\"16\" viewBox=\"0 0 16 16\" width=\"16\" display=\"block\">\n      <path\n        fill=\"green\"\n        d=\"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\"\n      ></path>\n    </svg>\n  </span>\n)\n\ntype Entry = {\n  label: string\n}\n\ntype RendererProps = {\n  handleEntry: (entry: Entry) => JSX.Element\n  label?: string\n  value: unknown\n  subEntries: Entry[]\n  subEntryPages: Entry[][]\n  type: string\n  expanded: boolean\n  copyable: boolean\n  toggleExpanded: () => void\n  pageSize: number\n}\n\n/**\n * Chunk elements in the array by size\n *\n * when the array cannot be chunked evenly by size, the last chunk will be\n * filled with the remaining elements\n *\n * @example\n * chunkArray(['a','b', 'c', 'd', 'e'], 2) // returns [['a','b'], ['c', 'd'], ['e']]\n */\nexport function chunkArray<T>(array: T[], size: number): T[][] {\n  if (size < 1) return []\n  let i = 0\n  const result: T[][] = []\n  while (i < array.length) {\n    result.push(array.slice(i, i + size))\n    i = i + size\n  }\n  return result\n}\n\ntype Renderer = (props: RendererProps) => JSX.Element\n\nexport const DefaultRenderer: Renderer = ({\n  handleEntry,\n  label,\n  value,\n  subEntries = [],\n  subEntryPages = [],\n  type,\n  expanded = false,\n  copyable = false,\n  toggleExpanded,\n  pageSize,\n}) => {\n  const [expandedPages, setExpandedPages] = React.useState<number[]>([])\n\n  return (\n    <Entry key={label}>\n      {subEntryPages.length ? (\n        <>\n          <ExpandButton onClick={() => toggleExpanded()}>\n            <Expander expanded={expanded} /> {label}{' '}\n            <Info>\n              {String(type).toLowerCase() === 'iterable' ? '(Iterable) ' : ''}\n              {subEntries.length} {subEntries.length > 1 ? `items` : `item`}\n            </Info>\n          </ExpandButton>\n          {copyable ? <CopyButton value={value} /> : null}\n          {expanded ? (\n            subEntryPages.length === 1 ? (\n              <SubEntries>{subEntries.map(handleEntry)}</SubEntries>\n            ) : (\n              <SubEntries>\n                {subEntryPages.map((entries, index) => (\n                  <div key={index}>\n                    <Entry>\n                      <LabelButton\n                        onClick={() =>\n                          setExpandedPages((old) =>\n                            old.includes(index)\n                              ? old.filter((d) => d !== index)\n                              : [...old, index],\n                          )\n                        }\n                      >\n                        <Expander expanded={expanded} /> [{index * pageSize} ...{' '}\n                        {index * pageSize + pageSize - 1}]\n                      </LabelButton>\n                      {expandedPages.includes(index) ? (\n                        <SubEntries>{entries.map(handleEntry)}</SubEntries>\n                      ) : null}\n                    </Entry>\n                  </div>\n                ))}\n              </SubEntries>\n            )\n          ) : null}\n        </>\n      ) : (\n        <>\n          <Label>{label}:</Label> <Value>{displayValue(value)}</Value>\n        </>\n      )}\n    </Entry>\n  )\n}\n\ntype ExplorerProps = Partial<RendererProps> & {\n  renderer?: Renderer\n  defaultExpanded?: true | Record<string, boolean>\n  copyable?: boolean\n}\n\ntype Property = {\n  defaultExpanded?: boolean | Record<string, boolean>\n  label: string\n  value: unknown\n}\n\nfunction isIterable(x: any): x is Iterable<unknown> {\n  return Symbol.iterator in x\n}\n\nexport default function Explorer({\n  value,\n  defaultExpanded,\n  renderer = DefaultRenderer,\n  pageSize = 100,\n  copyable = false,\n  ...rest\n}: ExplorerProps) {\n  const [expanded, setExpanded] = React.useState(Boolean(defaultExpanded))\n  const toggleExpanded = React.useCallback(() => setExpanded((old) => !old), [])\n\n  let type: string = typeof value\n  let subEntries: Property[] = []\n\n  const makeProperty = (sub: { label: string; value: unknown }): Property => {\n    const subDefaultExpanded =\n      defaultExpanded === true\n        ? { [sub.label]: true }\n        : defaultExpanded?.[sub.label]\n    return {\n      ...sub,\n      defaultExpanded: subDefaultExpanded,\n    }\n  }\n\n  if (Array.isArray(value)) {\n    type = 'array'\n    subEntries = value.map((d, i) =>\n      makeProperty({\n        label: i.toString(),\n        value: d,\n      }),\n    )\n  } else if (\n    value !== null &&\n    typeof value === 'object' &&\n    isIterable(value) &&\n    typeof value[Symbol.iterator] === 'function'\n  ) {\n    type = 'Iterable'\n    subEntries = Array.from(value, (val, i) =>\n      makeProperty({\n        label: i.toString(),\n        value: val,\n      }),\n    )\n  } else if (typeof value === 'object' && value !== null) {\n    type = 'object'\n    subEntries = Object.entries(value).map(([key, val]) =>\n      makeProperty({\n        label: key,\n        value: val,\n      }),\n    )\n  }\n\n  const subEntryPages = chunkArray(subEntries, pageSize)\n\n  return renderer({\n    handleEntry: (entry) => (\n      <Explorer\n        key={entry.label}\n        value={value}\n        renderer={renderer}\n        copyable={copyable}\n        {...rest}\n        {...entry}\n      />\n    ),\n    type,\n    subEntries,\n    subEntryPages,\n    value,\n    expanded,\n    copyable,\n    toggleExpanded,\n    pageSize,\n    ...rest,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}